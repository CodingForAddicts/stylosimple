/*! system-font.css v2.0.2 | CC0-1.0 License | github.com/jonathantneal/system-font-css */

@font-face {
    font-family: system-ui;
    font-style: normal;
    font-weight: 300;
    src: local(".SFNS-Light"), local(".SFNSText-Light"), local(".HelveticaNeueDeskInterface-Light"), local(".LucidaGrandeUI"), local("Segoe UI Light"), local("Ubuntu Light"), local("Roboto-Light"), local("DroidSans"), local("Tahoma");
}

@font-face {
    font-family: system-ui;
    font-style: italic;
    font-weight: 300;
    src: local(".SFNS-LightItalic"), local(".SFNSText-LightItalic"), local(".HelveticaNeueDeskInterface-Italic"), local(".LucidaGrandeUI"), local("Segoe UI Light Italic"), local("Ubuntu Light Italic"), local("Roboto-LightItalic"), local("DroidSans"), local("Tahoma");
}

@font-face {
    font-family: system-ui;
    font-style: normal;
    font-weight: 400;
    src: local(".SFNS-Regular"), local(".SFNSText-Regular"), local(".HelveticaNeueDeskInterface-Regular"), local(".LucidaGrandeUI"), local("Segoe UI"), local("Ubuntu"), local("Roboto-Regular"), local("DroidSans"), local("Tahoma");
}

@font-face {
    font-family: system-ui;
    font-style: italic;
    font-weight: 400;
    src: local(".SFNS-Italic"), local(".SFNSText-Italic"), local(".HelveticaNeueDeskInterface-Italic"), local(".LucidaGrandeUI"), local("Segoe UI Italic"), local("Ubuntu Italic"), local("Roboto-Italic"), local("DroidSans"), local("Tahoma");
}

@font-face {
    font-family: system-ui;
    font-style: normal;
    font-weight: 500;
    src: local(".SFNS-Medium"), local(".SFNSText-Medium"), local(".HelveticaNeueDeskInterface-MediumP4"), local(".LucidaGrandeUI"), local("Segoe UI Semibold"), local("Ubuntu Medium"), local("Roboto-Medium"), local("DroidSans-Bold"), local("Tahoma Bold");
}

@font-face {
    font-family: system-ui;
    font-style: italic;
    font-weight: 500;
    src: local(".SFNS-MediumItalic"), local(".SFNSText-MediumItalic"), local(".HelveticaNeueDeskInterface-MediumItalicP4"), local(".LucidaGrandeUI"), local("Segoe UI Semibold Italic"), local("Ubuntu Medium Italic"), local("Roboto-MediumItalic"), local("DroidSans-Bold"), local("Tahoma Bold");
}

@font-face {
    font-family: system-ui;
    font-style: normal;
    font-weight: 700;
    src: local(".SFNS-Bold"), local(".SFNSText-Bold"), local(".HelveticaNeueDeskInterface-Bold"), local(".LucidaGrandeUI"), local("Segoe UI Bold"), local("Ubuntu Bold"), local("Roboto-Bold"), local("DroidSans-Bold"), local("Tahoma Bold");
}

@font-face {
    font-family: system-ui;
    font-style: italic;
    font-weight: 700;
    src: local(".SFNS-BoldItalic"), local(".SFNSText-BoldItalic"), local(".HelveticaNeueDeskInterface-BoldItalic"), local(".LucidaGrandeUI"), local("Segoe UI Bold Italic"), local("Ubuntu Bold Italic"), local("Roboto-BoldItalic"), local("DroidSans-Bold"), local("Tahoma Bold");
}

:root {
  --code-background: rgba(0, 0, 0, 0.03);
  --code-border: rgba(0, 0, 0, 0.05);
  --code-text: #303030;
  --code-comment: #9ea4aa;
  --code-type: #9f3b4f;
  --code-include: #8c3a94;
  --code-string: #6959a1;
  --code-class-name: #4968a8;
  --code-numbers: #a58a2a;
  --code-variables: #4689cc;
  --code-functions: #cf5da8;
  --code-literal: #db651c;

  --dark-code-background: rgba(255, 255, 255, 0.06);
  --dark-code-border: rgba(255, 255, 255, 0.08);
  --dark-code-text: #F7F7F7;
  --dark-code-comment: #80878D;
  --dark-code-type: #EF98A8;
  --dark-code-include: #C596C9;
  --dark-code-string: #A59CC7;
  --dark-code-class-name: #94A5CB;
  --dark-code-numbers: #E8D670;
  --dark-code-variables: #77B5E3;
  --dark-code-functions: #DF8DC0;
  --dark-code-literal: #F6B99A;

}

/* TASK LISTS -
================================================== */
.task-list-item {
  --checkbox-size: 1em;
}

/* Hide default bullets for unordered task lists. */
ul .task-list-item {
  list-style-type: none;
}

/* Hide gen-content bullets for unordered task lists. */
ul .task-list-item:before {
  display: none;
}

.task-list-item-checkbox {
  float: left;
  /* Removes from flow in case of paragraph list items */
  width: 1em;
  /* line-height */
  height: 1em;
  /* line-height */
  margin: 0 0 0 -1em;
  /* 0s to overwrite user agent styles */
  border: none;
  /* Otherwise iPhone draws a border */
  font-size: 1em;
  -webkit-appearance: none;
  /* Disables system checkbox image */
  opacity: 1;
  /* Otherwise they are 0.4 on iPhone, where it applies disabled effect even with above */
}

input[type="checkbox"].task-list-item-checkbox {
  position: relative;
  width: 1.2em;
  height: 1.2em;
  color: black;
  border: 3px solid rgb(128,128,128);
  border-radius: 6px;
  appearance: none;
  outline: 0;
  cursor: pointer;
  margin-right:0.3em;
  transition: background 175ms cubic-bezier(0.1, 0.1, 0.25, 1);
}

input[type="checkbox"].task-list-item-checkbox::before {
    position: absolute;
    content: "";
    display: block;
    top: 0.1em;
    left: 0.32em;
    width: 0.4em;
    height: 0.6em;
    border-style: solid;
    border-color: var(--darktitletextcolor);
    border-width: 0 0.13em 0.1em 0;
    transform: rotate(45deg);
    opacity: 0;
}

.dark input[type="checkbox"].task-list-item-checkbox::before {
    border-color: var(--lighttitletextcolor);
}

input[type="checkbox"].task-list-item-checkbox:checked::before {
    opacity: 1;
}


/* HIGHLIGHT JS -
================================================== */
.hljs {
  /* display: block; */
  overflow-x: auto;
  /* padding: 0.5em; */
  /* margin-left: 30px; */
  /* margin-right: 30px; */
  color: var(--code-text);
  background:  var(--code-background);
  border: 1px solid rgba(0, 0, 0, 0.03);
  box-sizing: border-box;
  border-radius: 4px;
  font-family: "Courier New", Courier, monospace;
  /* font-size: 14px; */
}

.dark .hljs{
  background:  var(--dark-code-background);
}

/************************************/
/*General purpose */
/* keyword     keyword in a regular Algol-style language */
.hljs-keyword {
  color: var(--code-include);
}
.dark .hljs-keyword {
  color: var(--dark-code-include);
}
/* built_in     built-in or library object (constant, class, function) */
.hljs-built_in {
  color: var(--code-include);
}
.dark .hljs-built_in {
  color: var(--dark-code-include);
}
/* type     data type (in a language with syntactically significant types) (string, int, array, etc.) */
.hljs-type {
  color: var(--code-type);
}
.dark .hljs-type {
  color: var(--dark-code-type);
}
/* literal     special identifier for a built-in value (true, false, null, etc.) */
.hljs-literal {
  color: var(--code-literal);
}
.dark .hljs-literal {
  color: var(--dark-code-literal);
}
/* number     number, including units and modifiers, if any. */
.hljs-number {
  color: var(--code-numbers);
}
.dark .hljs-number {
  color: var(--dark-code-numbers);
}
/* operator     operators: +, -, >>, |, == */
.hljs-operator {
  color: var(--code-functions);
}
.dark .hljs-operator {
  color: var(--dark-code-functions);
}
/* punctuation     aux. punctuation that should be subtly highlighted (parentheses, brackets, etc.) */
/*.hljs-punctuation {
  color: var(--);
}*/
/* regexp     literal regular expression */
.hljs-regexp {
  color: var(--code-type);
}
.dark .hljs-regexp {
  color: var(--dark-code-type);
}
/* string     literal string, character */
.hljs-string {
  color: var(--code-string);
}
.dark .hljs-string {
  color: var(--dark-code-string);
}
/* subst     parsed section inside a literal string */
.hljs-subst {
  color: var(--code-string);
}
.dark .hljs-subst {
  color: var(--dark-code-string);
}
/* symbol     symbolic constant, interned string, goto label */
/*.hljs-symbol {
  color: var(--);
}*/
/* class     class or class-level declaration (interfaces, traits, modules, etc), typically includes a title submode */
/*.hljs-class {
  color: var(--);
}*/
/* function     function or method declaration */
.hljs-function {
  color: var(--code-functions);
}
.dark .hljs-function {
  color: var(--dark-code-functions);
}
/* variable     variables */
.hljs-variable {
  color: var(--code-variables);
}
.dark .hljs-variable {
  color: var(--dark-code-variables);
}
/* title     name of a class or a function at the place of declaration */
.hljs-title {
  color: var(--code-class-name);
}
.dark .hljs-title {
  color: var(--dark-code-class-name);
}
/* params     block of function arguments (parameters) at the place of declaration */
/*.hljs-params {
  color: var(--);
}*/
/* comment     comments */
.hljs-comment {
  color: var(--code-comment);
}
.dark .hljs-comment {
  color: var(--dark-code-comment);
}
/* doctag     documentation markup within comments */
/*.hljs-doctag {
  color: var(--);
}*/

/************************************/
/* Meta */
/* meta     flags, modifiers, annotations, processing instructions, preprocessor directives, etc */
.hljs-meta {
  color: var(--code-include);
}
.dark .hljs-meta {
  color: var(--dark-code-include);
}
/* meta-keyword     keyword or built-in within meta construct */
/*.hljs-meta-keyword {
  color: var(--);
}*/
/* meta-string     string within meta construct */
.hljs-meta-string {
  color: var(--code-string);
}
.dark .hljs-meta-string {
  color: var(--dark-code-string);
}
/************************************/
/* Tags, attributes, configs */
/* section     heading of a section in a config file, heading in text markup */
.hljs-section {
  font-weight: 700;
}
/* tag     XML/HTML tag */
/*.hljs-tag {
  color: var(--);
}*/
/* name     name of an XML tag, the first word in an s-expression */
.hljs-name {
  color: var(--code-functions);
}
.dark .hljs-name {
  color: var(--dark-code-functions);
}
/* builtin-name     s-expression name from the language standard library */
/*.hljs-builtin-name {
  color: var(--);
}*/
/* attr     name of an attribute with no language defined semantics (keys in JSON, setting names in .ini), also sub-attribute within another highlighted object, like XML tag */
.hljs-attr {
  color: var(--code-variables);
}
.dark .hljs-attr {
  color: var(--dark-code-variables);
}
/* attribute     name of an attribute followed by a structured value part, like CSS properties */
.hljs-attribute {
  color: var(--code-variables);
}
.dark .hljs-attribute {
  color: var(--dark-code-variables);
}
/************************************/
/* Text Markup */
/* bullet     list item bullet */
/*.hljs-bullet {
  color: var(--);
}*/
/* code     code block */
.hljs-code {
  /* not sure this is the behavior we are expecting*/
  /* color: var(--code-type); */
  /*color: var(--);*/
}
/* emphasis     emphasis */
.hljs-emphasis {
  font-style: italic;
}
/* strong     strong emphasis */
.hljs-strong {
  font-weight: 700;
}
/* formula     mathematical formula */
.hljs-formula {
  color: var(--code-type);
}
.dark .hljs-formula {
  color: var(--dark-code-type);
}
/* link     hyperlink */
.hljs-link {
  text-decoration: underline;
}
/* quote     quotation or blockquote */
.hljs-quote {
  color: var(--code-comment);
  font-style: normal;
}
.dark .hljs-quote {
  color: var(--dark-code-comment);
}
/************************************/
/* CSS */
/* selector-tag     tag selector */
.hljs-selector-tag {
  color: var(--code-type);
}
.dark .hljs-selector-tag {
  color: var(--dark-code-type);
}
/* selector-id     #id selector */
.hljs-selector-id {
  color: var(--code-type);
}
.dark .hljs-selector-id {
  color: var(--dark-code-type);
}
/* selector-class     .class selector */
.hljs-selector-class {
  color: var(--code-type);
}
.dark .hljs-selector-class {
  color: var(--dark-code-type);
}
/* selector-attr     [attr] selector */
.hljs-selector-attr {
  color: var(--code-variables);
}
.dark .hljs-selector-attr {
  color: var(--dark-code-variables);
}
/* selector-pseudo     :pseudo selector */
.hljs-selector-pseudo {
  color: var(--code-type);
}
.dark .hljs-selector-pseudo {
  color: var(--dark-code-type);
}

/************************************/
/* Templates */
/* template-tag     tag of a template language */
/*.hljs-template-tag {
  color: var(--);
}*/
/* template-variable     variable in a template language */
.hljs-template-variable {
  color: var(--code-variables);
}
.dark .hljs-template-variable {
  color: var(--dark-code-variables);
}

/************************************/
/* diff */
/* addition     added or changed line */
.hljs-addition {
  color: #275078;
  background-color: rgba(70, 137, 204, 0.11);
}
.dark .hljs-addition {
  color: #C8E8FF;
  background-color: rgba(200, 232, 255, 0.16);
}
/* deletion     deleted line */
.hljs-deletion {
  color: #7c3163;
  background-color: rgba(207, 93, 168, 0.11);
}
.dark .hljs-deletion {
  color: #F2CCE5;
  background-color: rgba(242, 204, 229, 0.16);
}


/************************************/
/* Richard's adjustment */

/* Dynamic Heading */

section > :not([class*="layout-"]) h1,
[class*="layout-"] > div h1 {
  line-height: 1;
  font-size: 2.986em;
}
section > :not([class*="layout-"]) h2,
[class*="layout-"] > div h2 {
  line-height: 1.1;
  font-size: 2.488em;
}
section > :not([class*="layout-"]) h3,
[class*="layout-"] > div h3 {
  line-height: 1.2;
  font-size: 1.728em;
}
section > :not([class*="layout-"]) h5,
[class*="layout-"] > div h5 {
  font-weight: 300;
}
section > :not([class*="layout-"]) h6,
[class*="layout-"] > div h6 {
  font-size: 1em;
  line-height: 1.4;
}

.layout-title > :not([class*="layout-"]) > h1 + h2,
.layout-cover > :not([class*="layout-"]) > h1 + h2,
.layout-caption > :not([class*="layout-"]) > h1 + h2,
.layout-title-image > :not([class*="layout-"]) > h1 + h2,
.layout-section > :not([class*="layout-"]) > h1 + h2:nth-child(2):last-child,
.layout-default > :not([class*="layout-"]) > h1 + h2:nth-child(2):last-child,
.layout-title > :not([class*="layout-"]) > h2 + h3,
.layout-cover > :not([class*="layout-"]) > h2 + h3,
.layout-caption > :not([class*="layout-"]) > h2 + h3,
.layout-title-image > :not([class*="layout-"]) > h2 + h3,
.layout-section > :not([class*="layout-"]) > h2 + h3:nth-child(2):last-child,
.layout-default > :not([class*="layout-"]) > h2 + h3:nth-child(2):last-child,
.layout-title > :not([class*="layout-"]) > h3 + h4,
.layout-cover > :not([class*="layout-"]) > h3 + h4,
.layout-caption > :not([class*="layout-"]) > h3 + h4,
.layout-title-image > :not([class*="layout-"]) > h3 + h4,
.layout-section > :not([class*="layout-"]) > h3 + h4:nth-child(2):last-child,
.layout-default > :not([class*="layout-"]) > h3 + h4:nth-child(2):last-child,
.layout-title > :not([class*="layout-"]) > h3 + h5,
.layout-cover > :not([class*="layout-"]) > h3 + h5,
.layout-caption > :not([class*="layout-"]) > h3 + h5,
.layout-title-image > :not([class*="layout-"]) > h3 + h5,
.layout-section > :not([class*="layout-"]) > h3 + h5:nth-child(2):last-child,
.layout-default > :not([class*="layout-"]) > h3 + h5:nth-child(2):last-child,
.layout-title > :not([class*="layout-"]) > h4 + h6,
.layout-cover > :not([class*="layout-"]) > h4 + h6,
.layout-caption > :not([class*="layout-"]) > h4 + h6,
.layout-title-image > :not([class*="layout-"]) > h4 + h6,
.layout-section > :not([class*="layout-"]) > h4 + h6:nth-child(2):last-child,
.layout-default > :not([class*="layout-"]) > h4 + h6:nth-child(2):last-child,
.layout-title > :not([class*="layout-"]) > h5 + h6,
.layout-cover > :not([class*="layout-"]) > h5 + h6,
.layout-caption > :not([class*="layout-"]) > h5 + h6,
.layout-title-image > :not([class*="layout-"]) > h5 + h6,
.layout-section > :not([class*="layout-"]) > h5 + h6:nth-child(2):last-child,
.layout-default > :not([class*="layout-"]) > h5 + h6:nth-child(2):last-child,
.layout-title > :not([class*="layout-"]) > h3 + p,
.layout-cover > :not([class*="layout-"]) > h3 + p,
.layout-caption > :not([class*="layout-"]) > h3 + p,
.layout-title-image > :not([class*="layout-"]) > h3 + p,
.layout-section > :not([class*="layout-"]) > h3 + p:nth-child(2):last-child,
.layout-default > :not([class*="layout-"]) > h3 + p:nth-child(2):last-child {
  margin-top: 0.1em;
}
.layout-title > :not([class*="layout-"]) > h1 + h3,
.layout-cover > :not([class*="layout-"]) > h1 + h3,
.layout-caption > :not([class*="layout-"]) > h1 + h3,
.layout-title-image > :not([class*="layout-"]) > h1 + h3,
.layout-section > :not([class*="layout-"]) > h1 + h3:nth-child(2):last-child,
.layout-default > :not([class*="layout-"]) > h1 + h3:nth-child(2):last-child,
.layout-title > :not([class*="layout-"]) > h2 + h4,
.layout-cover > :not([class*="layout-"]) > h2 + h4,
.layout-caption > :not([class*="layout-"]) > h2 + h4,
.layout-title-image > :not([class*="layout-"]) > h2 + h4,
.layout-section > :not([class*="layout-"]) > h2 + h4:nth-child(2):last-child,
.layout-default > :not([class*="layout-"]) > h2 + h4:nth-child(2):last-child,
.layout-title > :not([class*="layout-"]) > h2 + h5,
.layout-cover > :not([class*="layout-"]) > h2 + h5,
.layout-caption > :not([class*="layout-"]) > h2 + h5,
.layout-title-image > :not([class*="layout-"]) > h2 + h5,
.layout-section > :not([class*="layout-"]) > h2 + h5:nth-child(2):last-child,
.layout-default > :not([class*="layout-"]) > h2 + h5:nth-child(2):last-child,
.layout-title > :not([class*="layout-"]) > h3 + h6,
.layout-cover > :not([class*="layout-"]) > h3 + h6,
.layout-caption > :not([class*="layout-"]) > h3 + h6,
.layout-title-image > :not([class*="layout-"]) > h3 + h6,
.layout-section > :not([class*="layout-"]) > h3 + h6:nth-child(2):last-child,
.layout-default > :not([class*="layout-"]) > h3 + h6:nth-child(2):last-child,
.layout-title > :not([class*="layout-"]) > h2 + p,
.layout-cover > :not([class*="layout-"]) > h2 + p,
.layout-caption > :not([class*="layout-"]) > h2 + p,
.layout-title-image > :not([class*="layout-"]) > h2 + p,
.layout-section > :not([class*="layout-"]) > h2 + p:nth-child(2):last-child,
.layout-default > :not([class*="layout-"]) > h2 + p:nth-child(2):last-child {
  margin-top: 0.2em;
}
.layout-title > :not([class*="layout-"]) > h1 + h4,
.layout-cover > :not([class*="layout-"]) > h1 + h4,
.layout-caption > :not([class*="layout-"]) > h1 + h4,
.layout-title-image > :not([class*="layout-"]) > h1 + h4,
.layout-section > :not([class*="layout-"]) > h1 + h5:nth-child(2):last-child,
.layout-default > :not([class*="layout-"]) > h1 + h5:nth-child(2):last-child,
.layout-title > :not([class*="layout-"]) > h1 + h5,
.layout-cover > :not([class*="layout-"]) > h1 + h5,
.layout-caption > :not([class*="layout-"]) > h1 + h5,
.layout-title-image > :not([class*="layout-"]) > h1 + h5,
.layout-section > :not([class*="layout-"]) > h1 + h5:nth-child(2):last-child,
.layout-default > :not([class*="layout-"]) > h1 + h5:nth-child(2):last-child,
.layout-title > :not([class*="layout-"]) > h2 + h6,
.layout-cover > :not([class*="layout-"]) > h2 + h6,
.layout-caption > :not([class*="layout-"]) > h2 + h6,
.layout-title-image > :not([class*="layout-"]) > h2 + h6,
.layout-section > :not([class*="layout-"]) > h2 + h6:nth-child(2):last-child,
.layout-default > :not([class*="layout-"]) > h2 + h6:nth-child(2):last-child,
.layout-title > :not([class*="layout-"]) > h1 + p,
.layout-cover > :not([class*="layout-"]) > h1 + p,
.layout-caption > :not([class*="layout-"]) > h1 + p,
.layout-title-image > :not([class*="layout-"]) > h1 + p,
.layout-section > :not([class*="layout-"]) > h1 + p:nth-child(2):last-child,
.layout-default > :not([class*="layout-"]) > h1 + p:nth-child(2):last-child {
  margin-top: 0.3em;
}
.layout-title > :not([class*="layout-"]) > h1 + h6,
.layout-cover > :not([class*="layout-"]) > h1 + h6,
.layout-caption > :not([class*="layout-"]) > h1 + h6,
.layout-title-image > :not([class*="layout-"]) > h1 + h6,
.layout-section > :not([class*="layout-"]) > h1 + h6:nth-child(2):last-child,
.layout-default > :not([class*="layout-"]) > h1 + h6:nth-child(2):last-child {
  margin-top: 0.4em;
}

@media (max-width: 639px) {
  section > :not([class*="layout-"]) h1,
  [class*="layout-"] > div h1 {
    line-height: 1;
    font-size: 2.074em;
  }
  section > :not([class*="layout-"]) h2,
  [class*="layout-"] > div h2 {
    line-height: 1.1;
    font-size: 1.728em;
  }
  section > :not([class*="layout-"]) h3,
  [class*="layout-"] > div h3 {
    line-height: 1.2;
    font-size: 1.44em;
  }
  section > :not([class*="layout-"]) h5,
  [class*="layout-"] > div h5 {
    font-weight: normal;
  }
  section > :not([class*="layout-"]) h6,
  [class*="layout-"] > div h6 {
    font-size: 1em;
    line-height: 1.4;
  }
}
